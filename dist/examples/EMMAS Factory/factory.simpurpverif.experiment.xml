<?xml version="1.0"?>

<experiment name="Factory assembly" description="Seeks the best factory configuration." >

  <!-- A simulation purpose verification  -->
  <simulation-purpose-verification relation="feasibility">
   
    <states>
     <state id="initial"/>  <state id="1"/>  <state id="2"/>  <state id="3"/>  <state id="4"/>  <state id="5"/>
     <state id="6"/>   <state id="7"/>   <state id="8"/>   <state id="9"/>   <state id="10"/>  <state id="11"/>
     <state id="12"/>  <state id="13"/>  <state id="14"/>  <state id="15"/>  <state id="16"/>  <state id="17"/>
     <state id="18"/>  <state id="19"/>  <state id="20"/>  <state id="21"/>  <state id="22"/>  <state id="23"/>
     <state id="24"/>  <state id="25"/>  <state id="26"/>  <state id="27"/>  <state id="28"/>  <state id="29"/>
     <state id="30"/>  <state id="31"/>  <state id="32"/>  <state id="33"/>  <state id="34"/>  <state id="35"/>
     <state id="36"/>  <state id="37"/>  <state id="38"/>  <state id="39"/>  <state id="40"/>
    </states>
    
    <events>
      <emmas-event id="?beg_workproduct0_ag11" type="input" name="beginning" stimulus="work_product_0" agent-id="11"/>
      <emmas-event id="?beg_workproduct1_ag11" type="input" name="beginning" stimulus="work_product_1" agent-id="11"/>
      <emmas-event id="?beg_workproduct2_ag11" type="input" name="beginning" stimulus="work_product_2" agent-id="11"/>
      <emmas-event id="?beg_workproduct0_ag12" type="input" name="beginning" stimulus="work_product_0" agent-id="12"/>
      <emmas-event id="?beg_workproduct1_ag12" type="input" name="beginning" stimulus="work_product_1" agent-id="12"/>
      <emmas-event id="?beg_workproduct2_ag12" type="input" name="beginning" stimulus="work_product_2" agent-id="12"/>
      <emmas-event id="?beg_workproduct0_ag13" type="input" name="beginning" stimulus="work_product_0" agent-id="13"/>
      <emmas-event id="?beg_workproduct1_ag13" type="input" name="beginning" stimulus="work_product_1" agent-id="13"/>
      <emmas-event id="?beg_workproduct2_ag13" type="input" name="beginning" stimulus="work_product_2" agent-id="13"/>
    
      <emmas-event id="!emit_orderwork0_ag0" type="output" name="emit" action="order_work" agent-id="0"/>
      <emmas-event id="!emit_orderwork0_ag1" type="output" name="emit" action="order_work" agent-id="1"/>
      
      <emmas-event id="!emit_work3_ag11" type="output" name="emit" action="work_3" agent-id="11"/>
      <emmas-event id="!emit_work3_ag12" type="output" name="emit" action="work_3" agent-id="12"/>
      <emmas-event id="!emit_work3_ag13" type="output" name="emit" action="work_3" agent-id="13"/>
    </events>
    
    
    
    <transitions>
    
    <!-- There are several ways of building the company's assembly line.
         The following transitions specify that the assembly line must
         be built and that it must go through a number of phases.
         The exact events that accomplish this will be found during verification.

         For the sake of illustration, some things are left concrete ("do this event"), and others
         abstract ("do any event such that X"). The more concrete, the easier
         it is to perform the verification (but the harder it is to write the
         simulation purpose).
    -->



     <!-- Establish a network configuration. Each new connection generates an 'internal' event,
          so we look for as many of them as necessary. -->
     <transition state-id1="initial" event-id="internal" state-id2="19"/>
     <transition state-id1="19" event-id="internal" state-id2="19"/>
     
     
     <!-- A manager must give the initial work order -->
     <transition state-id1="19" event-id="!emit_orderwork0_ag0" state-id2="20"/>
     <transition state-id1="19" event-id="!emit_orderwork0_ag1" state-id2="20"/>
     
     
     <!-- The order arrives to some agent. -->
     <transition state-id1="20" event-id="?beg_workproduct0_ag11" state-id2="21"/>
     <transition state-id1="20" event-id="?beg_workproduct0_ag12" state-id2="21"/>
     <transition state-id1="20" event-id="?beg_workproduct0_ag13" state-id2="21"/>
     
     <!-- Some worker will be the first in the assembly line. Here we abstract which one by
          merely specifying the 'other' event. In a feasible run, this
          will synchronize with some 'emit' of some agent (e.g., '!emit_work1_ag11'). -->
     <transition state-id1="21" event-id="?commit" state-id2="22"/>
     <transition state-id1="22" event-id="other" state-id2="26"/>
     <transition state-id1="22" event-id="?commit" state-id2="23"/>
     <transition state-id1="23" event-id="other" state-id2="26"/>
     <transition state-id1="23" event-id="?commit" state-id2="24"/>
     <transition state-id1="24" event-id="other" state-id2="26"/>
     <transition state-id1="24" event-id="?commit" state-id2="25"/>
     <transition state-id1="25" event-id="other" state-id2="26"/>

     <!-- The partial product gets to the next worker. -->     
     <transition state-id1="26" event-id="?beg_workproduct1_ag12" state-id2="27"/>
     <transition state-id1="26" event-id="?beg_workproduct1_ag11" state-id2="27"/>
     <transition state-id1="26" event-id="?beg_workproduct1_ag13" state-id2="27"/>

     <!-- Some worker will be the second in the assembly line. Here we abstract which one by
          merely specifying the 'other' event. In a feasible trace, this
          will synchronize with some 'emit' of some agent. -->
     <transition state-id1="27" event-id="?commit" state-id2="28"/>
     <transition state-id1="28" event-id="other" state-id2="32"/>
     <transition state-id1="28" event-id="?commit" state-id2="29"/>
     <transition state-id1="29" event-id="other" state-id2="32"/>
     <transition state-id1="29" event-id="?commit" state-id2="30"/>
     <transition state-id1="30" event-id="other" state-id2="32"/>
     <transition state-id1="30" event-id="?commit" state-id2="31"/>
     <transition state-id1="31" event-id="other" state-id2="32"/>

     <!-- The partial product gets to the next worker. -->     
     <transition state-id1="32" event-id="?beg_workproduct2_ag13" state-id2="33"/>
     <transition state-id1="32" event-id="?beg_workproduct2_ag11" state-id2="33"/>
     <transition state-id1="32" event-id="?beg_workproduct2_ag12" state-id2="33"/>
     
     <!-- Some worker will be the third (and last) in the assembly line. Here we 
          so not abstract which event corresponds to this. Notice the difference
          w.r.t. the previous assembly line positions. -->
     <transition state-id1="33" event-id="?commit" state-id2="34"/>
     <transition state-id1="34" event-id="!emit_work3_ag13" state-id2="success"/>
     <transition state-id1="34" event-id="!emit_work3_ag11" state-id2="success"/>
     <transition state-id1="34" event-id="!emit_work3_ag12" state-id2="success"/>
     <transition state-id1="34" event-id="?commit" state-id2="35"/>
     <transition state-id1="35" event-id="!emit_work3_ag13" state-id2="success"/>
     <transition state-id1="34" event-id="!emit_work3_ag11" state-id2="success"/>
     <transition state-id1="34" event-id="!emit_work3_ag12" state-id2="success"/>
     <transition state-id1="35" event-id="?commit" state-id2="36"/>
     <transition state-id1="36" event-id="!emit_work3_ag13" state-id2="success"/>
     <transition state-id1="36" event-id="!emit_work3_ag11" state-id2="success"/>
     <transition state-id1="36" event-id="!emit_work3_ag12" state-id2="success"/>
     <transition state-id1="36" event-id="?commit" state-id2="37"/>
     <transition state-id1="37" event-id="!emit_work3_ag13" state-id2="success"/>
     <transition state-id1="37" event-id="!emit_work3_ag11" state-id2="success"/>
     <transition state-id1="37" event-id="!emit_work3_ag12" state-id2="success"/>
      
    </transitions>
    
  </simulation-purpose-verification>

</experiment>